name: Package Compose Desktop Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: read

jobs:
  # Job to increment version for manual releases
  increment-version:
    name: Increment Version
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: get-version
        run: |
          CURRENT_VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' build.gradle.kts)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: set-version
        run: |
          CURRENT_VERSION=${{ steps.get-version.outputs.current_version }}
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in build.gradle.kts
        run: |
          sed -i "s/version = \"[^\"]*\"/version = \"${{ steps.set-version.outputs.new_version }}\"/" build.gradle.kts
          sed -i "s/packageVersion = \"[^\"]*\"/packageVersion = \"${{ steps.set-version.outputs.new_version }}\"/" build.gradle.kts

      - name: Commit and push version change
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add build.gradle.kts
          git commit -m "Bump version to ${{ steps.set-version.outputs.new_version }}"
          git tag -a "v${{ steps.set-version.outputs.new_version }}" -m "Release v${{ steps.set-version.outputs.new_version }}"
          git push origin HEAD:main --tags

  # Build job for regular pushes and pull requests
  build:
    name: Build Application
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.set-ref.outputs.ref }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set reference
        id: set-ref
        run: |
          echo "ref=${{ github.ref }}" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  # Build job for manual releases
  build-release:
    name: Build Release
    if: github.event_name == 'workflow_dispatch'
    needs: [increment-version]
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.set-ref.outputs.ref }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ format('v{0}', needs.increment-version.outputs.new_version) }}

      - name: Set reference
        id: set-ref
        run: |
          echo "ref=${{ format('v{0}', needs.increment-version.outputs.new_version) }}" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  # Package job for regular pushes and pull requests
  package:
    name: Package for ${{ matrix.os }}
    if: github.event_name != 'workflow_dispatch'
    needs: [build]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            packageType: deb
          - os: windows-latest
            packageType: exe
          - os: macos-latest
            packageType: dmg

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.ref }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Package for ${{ matrix.os }}
        run: ./gradlew packageDistributionForCurrentOS

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Leviathan-${{ matrix.packageType }}
          path: build/compose/binaries/main/${{ matrix.packageType }}/*

  # Package job for manual releases
  package-release:
    name: Package Release for ${{ matrix.os }}
    if: github.event_name == 'workflow_dispatch'
    needs: [build-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            packageType: deb
          - os: windows-latest
            packageType: exe
          - os: macos-latest
            packageType: dmg

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-release.outputs.ref }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Package for ${{ matrix.os }}
        run: ./gradlew packageDistributionForCurrentOS

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Leviathan-${{ matrix.packageType }}
          path: build/compose/binaries/main/${{ matrix.packageType }}/*

  # Create pre-release job - creates pre-releases for pushes to main
  create-pre-release:
    name: Create Pre-release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [package]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Pre-release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/Leviathan-*/**/*
          name: "Development Build"
          tag_name: "dev-${{ github.run_number }}"
          prerelease: true
          generate_release_notes: true
          body: |
            ## Development Build

            This is an automated pre-release build from the latest code on the main branch.

            **Build Number:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}

            ### ⚠️ Warning
            This is a development build and may contain bugs or incomplete features.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create full release job - creates full releases for manual workflow dispatch
  create-full-release:
    name: Create Full Release
    if: github.event_name == 'workflow_dispatch'
    needs: [increment-version, package-release]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Full Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/Leviathan-*/**/*
          name: "Release v${{ needs.increment-version.outputs.new_version }}"
          tag_name: "v${{ needs.increment-version.outputs.new_version }}"
          prerelease: false
          generate_release_notes: true
          body: |
            ## Release v${{ needs.increment-version.outputs.new_version }}

            ### What's New
            This release includes new features, bug fixes, and performance improvements.

            ### Installation
            Download the appropriate package for your operating system:
            - Windows: `.exe` file
            - macOS: `.dmg` file
            - Linux: `.deb` file

            ### Feedback
            Please report any issues or suggestions on the [GitHub Issues](https://github.com/${{ github.repository }}/issues) page.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
